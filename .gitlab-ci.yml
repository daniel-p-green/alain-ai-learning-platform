# Minimal pipeline to validate TypeScript and optionally build the Next.js app.

image: node:20-bullseye

variables:
  NEXT_TELEMETRY_DISABLED: "1"
  CI: "true"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - web/node_modules/
    - backend/node_modules/

stages:
  - setup
  - lint
  - build
  - test

install:
  stage: setup
  script:
    - node -v
    - npm -v
    - |
      if [ -f package-lock.json ]; then
        echo "Installing root deps"; npm ci; else echo "No root package-lock.json"; fi
    - |
      if [ -d web ] && [ -f web/package-lock.json ]; then
        echo "Installing web deps"; cd web && npm ci && cd - > /dev/null; else echo "No web/package-lock.json"; fi
    - |
      if [ -d backend ] && [ -f backend/package-lock.json ]; then
        echo "Installing backend deps"; cd backend && npm ci && cd - > /dev/null; else echo "No backend/package-lock.json"; fi

lint:
  stage: lint
  needs: ["install"]
  script:
    - |
      set -e
      ran=0
      if [ -f .eslintrc.json ] || [ -f .eslintrc.js ]; then
        echo "Running ESLint in repo root";
        npx -y eslint .
        ran=1
      fi
      if [ -d web ] && ( [ -f web/.eslintrc.json ] || [ -f web/.eslintrc.js ] ); then
        echo "Running ESLint in web/";
        (cd web && npx -y eslint .)
        ran=1
      fi
      if [ -d backend ] && ( [ -f backend/.eslintrc.json ] || [ -f backend/.eslintrc.js ] ); then
        echo "Running ESLint in backend/";
        (cd backend && npx -y eslint .)
        ran=1
      fi
      if [ "$ran" -eq 0 ]; then
        echo "No ESLint config found; failing would be noisy. Skipping lint.";
      fi

tsc:
  stage: build
  needs: ["install"]
  script:
    - |
      set -e
      if [ -f tsconfig.json ]; then
        echo "Type-checking root"; npx -y tsc -p tsconfig.json --noEmit; fi
      if [ -f web/tsconfig.json ]; then
        echo "Type-checking web"; (cd web && npx -y tsc -p tsconfig.json --noEmit); fi
      if [ -f backend/tsconfig.json ]; then
        echo "Type-checking backend"; (cd backend && npx -y tsc -p tsconfig.json --noEmit); fi

build_web:
  stage: build
  needs: ["install"]
  script:
    - |
      if [ -d web ] && [ -f web/package.json ]; then
        cd web && npm run build --if-present; else echo "No web app to build"; fi

test:
  stage: test
  needs: ["install"]
  script:
    - npm test --if-present || true
    - |
      if [ -d web ]; then (cd web && npm test --if-present) || true; fi
    - |
      if [ -d backend ]; then (cd backend && npm test --if-present) || true; fi
