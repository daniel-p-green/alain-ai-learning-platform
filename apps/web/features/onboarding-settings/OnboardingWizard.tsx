"use client";

import BrandLogo from "../../components/BrandLogo";
import { useEffect, useMemo, useState } from "react";
import { useOnboarding } from "./useOnboarding";
import { DEFAULT_SETTINGS, ProviderId } from "./types";
import { useSettings } from "./useSettings";
import OnboardingStep from "./OnboardingStep";

type ProviderMeta = {
  id: ProviderId;
  label: string;
  description: string;
  requiresKey?: boolean;
  hasBase?: boolean;
  envKey?: string;
  baseEnvKey?: string;
  defaultBase?: string;
  docUrl?: string;
};

const PROVIDER_CARDS: ProviderMeta[] = [
  {
    id: "poe",
    label: "Poe (hosted)",
    description: "Fastest setup. Works with GPT-OSS models hosted by Poe.",
    requiresKey: true,
    envKey: "POE_API_KEY",
    defaultBase: "https://api.poe.com/v1",
    docUrl: "https://poe.com/api_key",
  },
  {
    id: "openai-compatible",
    label: "OpenAI-compatible",
    description: "OpenAI, Together, vLLM, Groq, or any server that speaks the OpenAI API.",
    requiresKey: true,
    envKey: "OPENAI_API_KEY",
    hasBase: true,
    baseEnvKey: "OPENAI_BASE_URL",
    defaultBase: "https://api.openai.com/v1",
    docUrl: "https://platform.openai.com",
  },
  {
    id: "huggingface",
    label: "Hugging Face",
    description: "Use HF Inference endpoints or speed up private model downloads.",
    requiresKey: true,
    envKey: "HF_TOKEN",
    docUrl: "https://huggingface.co/settings/tokens",
  },
];

type ProviderDraft = {
  enabled: boolean;
  baseUrl?: string;
};

type SecretsDraft = Record<ProviderId, string>;

type EnvFile = {
  content: string;
  secretKeys: string[];
};

function buildEnvFile({
  drafts,
  secrets,
  teacherProvider,
  allow120B,
}: {
  drafts: Record<ProviderId, ProviderDraft>;
  secrets: SecretsDraft;
  teacherProvider: "poe" | "openai-compatible";
  allow120B: boolean;
}): EnvFile {
  const lines: string[] = [];
  lines.push("# ALAIN AI Learning Platform – environment configuration");
  lines.push("# Generated by the onboarding wizard. Keep this file private.");
  lines.push("# Save as .env.local in the project root (git ignored).");
  lines.push("");
  lines.push("# === Provider credentials ===");

  if (drafts.poe?.enabled) {
    lines.push("# Poe API key (https://poe.com/api_key)");
    lines.push(`POE_API_KEY=${secrets.poe ?? ""}`);
    lines.push("");
  }

  const openaiEnabled = drafts["openai-compatible"]?.enabled;
  if (openaiEnabled || teacherProvider === "openai-compatible") {
    const base = drafts["openai-compatible"].baseUrl || "https://api.openai.com/v1";
    lines.push("# OpenAI-compatible endpoint (include /v1)");
    lines.push(`OPENAI_BASE_URL=${base}`);
    lines.push("OPENAI_API_KEY=" + (secrets["openai-compatible"] ?? ""));
    lines.push("");
  }

  if (drafts.huggingface?.enabled) {
    lines.push("# Hugging Face access token (optional but recommended for private models)");
    lines.push(`HF_TOKEN=${secrets.huggingface ?? ""}`);
    lines.push("");
  }

  lines.push("# Teacher routing (poe | openai-compatible)");
  lines.push(`TEACHER_PROVIDER=${teacherProvider}`);
  lines.push(`TEACHER_ALLOW_120B=${allow120B ? "1" : "0"}`);
  lines.push("");
  lines.push("# Auth (optional – uncomment if you use Clerk in production)");
  lines.push("# NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=");
  lines.push("# CLERK_SECRET_KEY=");
  lines.push("");
  lines.push("NODE_ENV=development");
  lines.push("");
  lines.push("# Need more examples? See env-config-example.txt in the repo.");

  const secretKeys = ["POE_API_KEY", "OPENAI_API_KEY", "HF_TOKEN"]; // we mask these in previews
  return { content: lines.join("\n") + "\n", secretKeys };
}

function maskContent(content: string, secretKeys: string[], showSecrets: boolean): string {
  if (showSecrets) return content;
  return content
    .split("\n")
    .map((line) => {
      if (!line || line.startsWith("#")) return line;
      const [key, value] = line.split("=", 2);
      if (!value) return line;
      if (secretKeys.includes(key.trim()) && value.trim()) {
        return `${key}=••••••`;
      }
      return line;
    })
    .join("\n");
}

export default function OnboardingWizard() {
  const { complete } = useOnboarding();
  const settings = useSettings();

  const [step, setStep] = useState(1);
  const [providerDrafts, setProviderDrafts] = useState<Record<ProviderId, ProviderDraft>>(() => {
    const next: Record<ProviderId, ProviderDraft> = {} as Record<ProviderId, ProviderDraft>;
    DEFAULT_SETTINGS.providers.forEach((p) => {
      const existing = settings.providers.find((sp) => sp.id === p.id);
      next[p.id] = {
        enabled: !!existing?.enabled,
        baseUrl: existing?.baseUrl || p.baseUrl,
      };
    });
    return next;
  });
  const [secrets, setSecrets] = useState<SecretsDraft>(() => {
    const m: SecretsDraft = {} as SecretsDraft;
    DEFAULT_SETTINGS.providers.forEach((p) => {
      m[p.id] = "";
    });
    return m;
  });

  const defaultTeacher: "poe" | "openai-compatible" = settings.providers.find(
    (p) => p.enabled && (p.id === "poe" || p.id === "openai-compatible")
  )?.id as "poe" | "openai-compatible" | undefined || "poe";
  const [teacherProvider, setTeacherProvider] = useState<"poe" | "openai-compatible">(defaultTeacher);
  const [allow120B, setAllow120B] = useState(false);
  const [showSecrets, setShowSecrets] = useState(false);
  const [copyStatus, setCopyStatus] = useState<"idle" | "success" | "error">("idle");

  const selectedCount = useMemo(
    () => PROVIDER_CARDS.filter((meta) => providerDrafts[meta.id]?.enabled).length,
    [providerDrafts]
  );

  useEffect(() => {
    // Ensure teacher provider always maps to an enabled provider if possible
    if (teacherProvider === "poe" && !providerDrafts.poe?.enabled && providerDrafts["openai-compatible"]?.enabled) {
      setTeacherProvider("openai-compatible");
    }
    if (teacherProvider === "openai-compatible" && !providerDrafts["openai-compatible"]?.enabled && providerDrafts.poe?.enabled) {
      setTeacherProvider("poe");
    }
  }, [providerDrafts, teacherProvider]);

  useEffect(() => {
    setCopyStatus("idle");
  }, [secrets, providerDrafts, teacherProvider, allow120B]);

  const envFile = useMemo(
    () => buildEnvFile({ drafts: providerDrafts, secrets, teacherProvider, allow120B }),
    [providerDrafts, secrets, teacherProvider, allow120B]
  );
  const preview = useMemo(
    () => maskContent(envFile.content, envFile.secretKeys, showSecrets),
    [envFile.content, envFile.secretKeys, showSecrets]
  );

  const setProviderEnabled = (id: ProviderId, enabled: boolean) => {
    setProviderDrafts((prev) => ({
      ...prev,
      [id]: { ...prev[id], enabled },
    }));
  };

  const setProviderBase = (id: ProviderId, baseUrl: string) => {
    setProviderDrafts((prev) => ({
      ...prev,
      [id]: { ...prev[id], baseUrl },
    }));
  };

  const setSecret = (id: ProviderId, value: string) => {
    setSecrets((prev) => ({ ...prev, [id]: value }));
  };

  const handleDownload = () => {
    const blob = new Blob([envFile.content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const anchor = document.createElement("a");
    anchor.href = url;
    anchor.download = ".env.local";
    document.body.appendChild(anchor);
    anchor.click();
    anchor.remove();
    URL.revokeObjectURL(url);
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(envFile.content);
      setCopyStatus("success");
    } catch (error) {
      console.error("Copy failed", error);
      setCopyStatus("error");
    }
  };

  const persistAndFinish = () => {
    const sanitized = settings.providers.map((provider) => {
      const draft = providerDrafts[provider.id];
      if (!draft) return provider;
      return {
        ...provider,
        enabled: !!draft.enabled,
        baseUrl: draft.baseUrl || provider.baseUrl,
        apiKey: undefined,
      };
    });
    settings.setProviders(sanitized);
    settings.setPromptMode(teacherProvider === "poe" ? "poe" : "openai");
    complete();
  };

  // Step 1 — Introduction
  if (step === 1) {
    return (
      <OnboardingStep
        title="Configure your environment"
        subtitle="Generate a .env.local file with the providers you plan to use."
        onNext={() => setStep(2)}
        nextText="Start setup"
        footer={
          <button
            data-testid="ob-skip"
            className="inline-flex items-center h-10 px-4 rounded-[12px] border-2 border-alain-blue text-alain-blue bg-white focus:outline-none focus-visible:ring-2 focus-visible:ring-alain-blue"
            onClick={() => complete()}
          >
            Skip for now
          </button>
        }
      >
        <div className="flex flex-col items-center gap-5 text-center">
          <BrandLogo width={420} height={220} className="rounded-[16px] shadow-card" />
          <div className="space-y-2">
            <p className="text-sm text-ink-700">
              We keep your API keys on your device. This wizard guides you through creating a private <code>.env.local</code>
              file that the web app, CLI, and notebooks will all read automatically.
            </p>
            <p className="text-xs text-ink-500">
              Tip: Place the generated file at the project root (or alongside the CLI output) and never commit it to git.
            </p>
          </div>
        </div>
      </OnboardingStep>
    );
  }

  // Step 2 — Provider selection
  if (step === 2) {
    return (
      <OnboardingStep
        title="Select providers"
        subtitle="Choose the runtimes you want to configure and capture their credentials."
        onBack={() => setStep(1)}
        onNext={() => setStep(3)}
        nextDisabled={selectedCount === 0}
        nextText="Continue"
      >
        <div className="space-y-4">
          {PROVIDER_CARDS.map((provider) => {
            const draft = providerDrafts[provider.id];
            const enabled = !!draft?.enabled;
            return (
              <div key={provider.id} className="rounded-[12px] border border-ink-100 bg-paper-0 p-4 shadow-sm">
                <div className="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
                  <label className="inline-flex items-center gap-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4"
                      checked={enabled}
                      onChange={(event) => setProviderEnabled(provider.id, event.target.checked)}
                    />
                    <span className="font-medium text-ink-900">{provider.label}</span>
                  </label>
                  {provider.docUrl && (
                    <a
                      href={provider.docUrl}
                      target="_blank"
                      rel="noreferrer"
                      className="text-xs font-medium text-alain-blue hover:underline"
                    >
                      Provider docs ↗
                    </a>
                  )}
                </div>
                <p className="text-sm text-ink-700 mt-1">{provider.description}</p>
                {enabled && (
                  <div className="mt-3 grid gap-3 sm:grid-cols-2">
                    {provider.requiresKey && (
                      <div>
                        <label htmlFor={`${provider.id}-key`} className="block text-xs font-semibold text-ink-600">
                          {provider.envKey || "API key"}
                        </label>
                        <input
                          id={`${provider.id}-key`}
                          type="password"
                          className="mt-1 w-full h-10 rounded-[12px] border border-ink-100 bg-white px-3 text-sm text-ink-900 focus:outline-none focus-visible:ring-2 focus-visible:ring-alain-blue"
                          value={secrets[provider.id] || ""}
                          onChange={(event) => setSecret(provider.id, event.target.value.trim())}
                        />
                        <p className="mt-1 text-xs text-ink-500">Stored locally only. Will appear in the generated .env file.</p>
                      </div>
                    )}
                    {provider.hasBase && (
                      <div>
                        <label htmlFor={`${provider.id}-base`} className="block text-xs font-semibold text-ink-600">
                          {provider.baseEnvKey || "Base URL"}
                        </label>
                        <input
                          id={`${provider.id}-base`}
                          type="text"
                          className="mt-1 w-full h-10 rounded-[12px] border border-ink-100 bg-white px-3 text-sm text-ink-900 focus:outline-none focus-visible:ring-2 focus-visible:ring-alain-blue"
                          value={draft?.baseUrl || provider.defaultBase || ""}
                          onChange={(event) => setProviderBase(provider.id, event.target.value.trim())}
                          placeholder={provider.defaultBase}
                        />
                        <p className="mt-1 text-xs text-ink-500">Include the `/v1` suffix for OpenAI-compatible servers.</p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            );
          })}
          {selectedCount === 0 && (
            <div className="rounded-[12px] border border-yellow-200 bg-yellow-50 p-3 text-sm text-yellow-900">
              Select at least one provider to continue.
            </div>
          )}
        </div>
      </OnboardingStep>
    );
  }

  // Step 3 — Teacher preferences
  if (step === 3) {
    const poeEnabled = !!providerDrafts.poe?.enabled;
    const openaiEnabled = !!providerDrafts["openai-compatible"]?.enabled;
    return (
      <OnboardingStep
        title="Set defaults"
        subtitle="Choose the primary teacher provider and optional upgrades."
        onBack={() => setStep(2)}
        onNext={() => setStep(4)}
        nextText="Review"
      >
        <div className="space-y-4">
          <fieldset className="space-y-2">
            <legend className="text-xs font-semibold uppercase tracking-wide text-ink-500">Primary teacher provider</legend>
            <div className="space-y-2">
              <label className={`flex items-center gap-3 rounded-[12px] border p-3 ${teacherProvider === "poe" ? "border-alain-blue" : "border-ink-100"}`}>
                <input
                  type="radio"
                  name="teacher-provider"
                  value="poe"
                  checked={teacherProvider === "poe"}
                  onChange={() => poeEnabled && setTeacherProvider("poe")}
                  disabled={!poeEnabled}
                />
                <span className="text-sm text-ink-800">Poe (hosted)</span>
                {!poeEnabled && <span className="ml-2 text-xs text-ink-500">Enable Poe in the previous step to select it.</span>}
              </label>
              <label className={`flex items-center gap-3 rounded-[12px] border p-3 ${teacherProvider === "openai-compatible" ? "border-alain-blue" : "border-ink-100"}`}>
                <input
                  type="radio"
                  name="teacher-provider"
                  value="openai-compatible"
                  checked={teacherProvider === "openai-compatible"}
                  onChange={() => openaiEnabled && setTeacherProvider("openai-compatible")}
                  disabled={!openaiEnabled}
                />
                <span className="text-sm text-ink-800">OpenAI-compatible (OpenAI, local vLLM, etc.)</span>
                {!openaiEnabled && <span className="ml-2 text-xs text-ink-500">Enable an OpenAI-compatible provider to use this option.</span>}
              </label>
            </div>
          </fieldset>
          <div className="rounded-[12px] border border-ink-100 bg-paper-0 p-4">
            <label className="flex items-start gap-3">
              <input
                type="checkbox"
                checked={allow120B}
                onChange={(event) => setAllow120B(event.target.checked)}
              />
              <span className="text-sm text-ink-800">
                Allow GPT-OSS-120B as the teacher (optional upgrade)
                <span className="block text-xs text-ink-500">Leave unchecked to stay on GPT-OSS-20B, which uses fewer tokens.</span>
              </span>
            </label>
          </div>
        </div>
      </OnboardingStep>
    );
  }

  // Step 4 — Review and download
  return (
    <OnboardingStep
      title="Review & export"
      subtitle="Download the generated .env.local or copy it to your clipboard."
      onBack={() => setStep(3)}
      nextText="Finish"
      onNext={persistAndFinish}
    >
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-ink-700">Generated .env.local</span>
          <button
            type="button"
            className="text-xs font-medium text-alain-blue hover:underline"
            onClick={() => setShowSecrets((prev) => !prev)}
          >
            {showSecrets ? "Hide secrets" : "Show secrets"}
          </button>
        </div>
        <pre className="max-h-72 overflow-auto rounded-[12px] border border-ink-100 bg-ink-950 p-4 text-xs text-ink-100">
          <code>{preview}</code>
        </pre>
        <div className="flex flex-wrap gap-3">
          <button
            type="button"
            className="inline-flex items-center h-10 px-4 rounded-[12px] bg-alain-blue text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-alain-blue"
            onClick={handleDownload}
          >
            Download .env.local
          </button>
          <button
            type="button"
            className="inline-flex items-center h-10 px-4 rounded-[12px] border border-ink-200 bg-white text-ink-900 focus:outline-none focus-visible:ring-2 focus-visible:ring-alain-blue"
            onClick={handleCopy}
          >
            Copy to clipboard
          </button>
          {copyStatus === "success" && <span className="text-sm text-success-700 self-center">Copied!</span>}
          {copyStatus === "error" && <span className="text-sm text-red-600 self-center">Copy failed. Paste manually from the preview.</span>}
        </div>
        <div className="rounded-[12px] border border-ink-100 bg-paper-0 p-4 text-sm text-ink-700 space-y-2">
          <div className="font-semibold text-ink-900">Next steps</div>
          <ol className="list-decimal space-y-1 pl-4">
            <li>Save the file as <code>.env.local</code> in your project root (same folder as <code>package.json</code>).</li>
            <li>Restart the web app or CLI so new environment variables are loaded.</li>
            <li>Visit <code>/settings</code> → Providers to run connection tests with your new config.</li>
          </ol>
          <p className="text-xs text-ink-500">Need to configure backend secrets in Encore Cloud? Mirror these values in the Encore dashboard.</p>
        </div>
      </div>
    </OnboardingStep>
  );
}
