import { describe, it, expect, vi } from 'vitest';

// Mock Encore API surface
vi.mock('encore.dev/api', () => {
  class APIError extends Error {
    code: string;
    constructor(message: string, code = 'unknown') { super(message); this.code = code; }
    static invalidArgument(msg: string) { return new APIError(msg, 'invalid_argument'); }
    static resourceExhausted(msg: string) { return new APIError(msg, 'resource_exhausted'); }
    static internal(msg: string) { return new APIError(msg, 'internal'); }
    static unauthenticated(msg: string) { return new APIError(msg, 'unauthenticated'); }
    static notFound(msg: string) { return new APIError(msg, 'not_found'); }
  }
  return { APIError, api: (_opts: any, handler: any) => handler };
});

// Mock teacher + auth + env
vi.mock('./teacher', () => ({
  teacherGenerate: async () => ({
    success: true,
    content: JSON.stringify({
      title: 'Mocked Lesson',
      description: 'Generated by mocked teacher',
      learning_objectives: ['Understand basics'],
      steps: [
        { step_order: 1, title: 'Step 1', content: 'Say hello', code_template: "Respond 'Hello'" }
      ],
      model_maker: { name: 'OpenAI', org_type: 'company', homepage: 'https://openai.com' }
    })
  })
}));
vi.mock('../auth', () => ({ requireUserId: async () => 'integration-user' }));
vi.mock('../config/env', () => ({ validateBackendEnv: () => {} }));

// Mock tutorials DB used by import_lesson
vi.mock('../tutorials/db', () => {
  let nextId = 1000;
  const tx = {
    async queryRow() { return { id: nextId++ }; },
    async exec() { /* no-op */ },
    async commit() { /* no-op */ },
    async rollback() { /* no-op */ },
  };
  return {
    tutorialsDB: {
      async begin() { return tx; },
    }
  };
});

import { generateLesson } from './lesson-generator';
import { importLesson } from '../tutorials/import_lesson';

describe('generate â†’ import integration (mocked teacher/DB)', () => {
  it('generates a lesson and imports it successfully', async () => {
    const gen = await generateLesson({
      hfUrl: 'https://huggingface.co/openai/gpt-oss-20b',
      difficulty: 'beginner',
      teacherModel: 'GPT-OSS-20B',
      includeAssessment: false,
      provider: 'poe',
      includeReasoning: true,
    } as any, {} as any);

    expect(gen.success).toBe(true);
    expect(gen.lesson?.title).toBe('Mocked Lesson');
    expect(Array.isArray(gen.lesson?.steps)).toBe(true);

    const imp = await importLesson(gen.lesson as any, {} as any);
    expect(imp.tutorialId).toBeTruthy();
  });
});

