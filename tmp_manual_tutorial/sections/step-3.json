{
  "section_number": 3,
  "title": "Step 3: Build the Poe Model Selector",
  "estimated_tokens": 480,
  "callouts": [
    {
      "type": "note",
      "message": "Guard the model list both at compile time (`PoeModelId`) and at runtime (`isAllowedModel`)."
    }
  ],
  "content": [
    {
      "cell_type": "markdown",
      "source": "The selector drives everything downstream, so we enumerate the ten supported teachers and expose a typed helper that server components can trust. The React client component renders the dropdown and surfaces per-model descriptions to help reviewers pick the right runtime."
    },
    {
      "cell_type": "code",
      "source": "%%bash\nset -euo pipefail\ncat <<'EOF' > poe-chat-tutorial/lib/models.ts\nexport type PoeModel = {\n  id: PoeModelId;\n  label: string;\n  description: string;\n  recommended?: boolean;\n};\n\nexport const poeModels = [\n  {\n    id: \"gpt-oss-20b\",\n    label: \"GPT-OSS-20B\",\n    description: \"Open-source tuned teacher model optimised for tutorials.\",\n    recommended: true\n  },\n  {\n    id: \"gpt-oss-120b\",\n    label: \"GPT-OSS-120B\",\n    description: \"Larger OSS model with deeper reasoning and longer contexts.\"\n  },\n  {\n    id: \"gpt-5\",\n    label: \"GPT-5\",\n    description: \"Flagship high-reliability runtime for product demos.\"\n  },\n  {\n    id: \"gpt-5-chat\",\n    label: \"GPT-5 Chat\",\n    description: \"Conversational tuning of GPT-5 with faster latency.\"\n  },\n  {\n    id: \"claude-3.5-sonnet\",\n    label: \"Claude 3.5 Sonnet\",\n    description: \"Anthropic balanced model with tool-friendly outputs.\"\n  },\n  {\n    id: \"claude-opus-4.1\",\n    label: \"Claude Opus 4.1\",\n    description: \"High context window for research-heavy exchanges.\"\n  },\n  {\n    id: \"gemini-2.5-pro\",\n    label: \"Gemini 2.5 Pro\",\n    description: \"Google multimodal-capable chat model.\"\n  },\n  {\n    id: \"grok-3\",\n    label: \"Grok 3\",\n    description: \"XAI knowledge-focused assistant with fast follow-ups.\"\n  },\n  {\n    id: \"mixtral-8x22b\",\n    label: \"Mixtral 8x22B\",\n    description: \"Mixture-of-experts OSS alternative with low latency.\"\n  },\n  {\n    id: \"llama-3.1-405b\",\n    label: \"Llama 3.1 405B\",\n    description: \"Meta's flagship mixture-of-experts teacher.\"\n  }\n] as const satisfies readonly PoeModel[];\n\nexport type PoeModelId = typeof poeModels[number][\"id\"];\n\nconst allowedIds = new Set<PoeModelId>(poeModels.map((model) => model.id));\n\nexport function isAllowedModel(model: unknown): model is PoeModelId {\n  return typeof model === \"string\" && allowedIds.has(model as PoeModelId);\n}\nEOF\ncat <<'EOF' > poe-chat-tutorial/components/ModelSelector.tsx\n\"use client\";\n\nimport { poeModels, type PoeModelId } from \"@/lib/models\";\n\nexport type ModelSelectorProps = {\n  value: PoeModelId;\n  onChange: (model: PoeModelId) => void;\n  disabled?: boolean;\n};\n\nexport function ModelSelector({ value, onChange, disabled }: ModelSelectorProps) {\n  return (\n    <label className=\"card\" htmlFor=\"poe-model-selector\">\n      <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n        <div>\n          <strong>Teacher Model</strong>\n          <p style={{ margin: \"0.25rem 0\", color: \"#94a3b8\" }}>\n            Switch between Poe-hosted teachers without reloading the page.\n          </p>\n        </div>\n        <span className={`status-pill ${disabled ? \"idle\" : \"active\"}`}>\n          {disabled ? \"Locked\" : \"Live\"}\n        </span>\n      </div>\n      <select\n        id=\"poe-model-selector\"\n        value={value}\n        onChange={(event) => onChange(event.target.value as PoeModelId)}\n        disabled={disabled}\n        style={{\n          marginTop: \"0.75rem\",\n          padding: \"0.75rem 1rem\",\n          borderRadius: \"12px\",\n          border: \"1px solid rgba(148, 163, 184, 0.35)\",\n          background: \"rgba(15, 23, 42, 0.85)\",\n          color: \"#f8fafc\"\n        }}\n      >\n        {poeModels.map((model) => (\n          <option key={model.id} value={model.id}>\n            {model.label} {model.recommended ? \"\u00b7 Recommended\" : \"\"}\n          </option>\n        ))}\n      </select>\n      <ul style={{ marginTop: \"0.75rem\", paddingLeft: \"1.25rem\", color: \"#94a3b8\", fontSize: \"0.95rem\" }}>\n        {poeModels.map((model) => (\n          <li key={`${model.id}-details`}>\n            <strong>{model.label}:</strong> {model.description}\n          </li>\n        ))}\n      </ul>\n    </label>\n  );\n}\nEOF"
    },
    {
      "cell_type": "markdown",
      "source": "Update the homepage to render the selector (chat + telemetry will arrive in the next steps):"
    },
    {
      "cell_type": "code",
      "source": "%%bash\nset -euo pipefail\ncat <<'EOF' > poe-chat-tutorial/app/page.tsx\n\"use client\";\n\nimport { useState } from \"react\";\nimport { ModelSelector } from \"@/components/ModelSelector\";\nimport type { PoeModelId } from \"@/lib/models\";\n\nconst defaultModel: PoeModelId = (process.env.NEXT_PUBLIC_POE_DEFAULT_MODEL as PoeModelId) ?? \"gpt-oss-20b\";\n\nexport default function HomePage() {\n  const [model, setModel] = useState<PoeModelId>(defaultModel);\n\n  return (\n    <>\n      <section className=\"card\">\n        <h1 style={{ fontSize: \"2rem\", marginBottom: \"0.5rem\" }}>Pick your Poe teacher</h1>\n        <p style={{ color: \"#94a3b8\" }}>\n          This tutorial focuses on building a multi-model chat experience. First, confirm the selector renders and updates local state.\n        </p>\n      </section>\n\n      <ModelSelector value={model} onChange={setModel} disabled={false} />\n\n      <section className=\"card\">\n        <strong>Preview</strong>\n        <p style={{ marginTop: \"0.5rem\", color: \"#94a3b8\" }}>\n          Current selection: <code>{model}</code>. In the next step we'll wire the streaming chat UI for this model.\n        </p>\n      </section>\n    </>\n  );\n}\nEOF"
    }
  ]
}
