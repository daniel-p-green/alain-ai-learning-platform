{
  "section_number": 5,
  "title": "Step 5: Add Telemetry and Error Reporting",
  "estimated_tokens": 460,
  "callouts": [
    {
      "type": "note",
      "message": "Telemetry lives client-side for simplicity, but the types make it trivial to ship events elsewhere later."
    }
  ],
  "content": [
    {
      "cell_type": "markdown",
      "source": "With streaming in place, we surface latency and token usage so QA and launch teams can compare models objectively. The telemetry panel lists each turn with a status pill and highlights failures."
    },
    {
      "cell_type": "code",
      "source": "%%bash\nset -euo pipefail\ncat <<'EOF' > poe-chat-tutorial/components/TelemetryPanel.tsx\n\"use client\";\n\nimport type { ChatTelemetry } from \"@/lib/telemetry\";\n\nexport type TelemetryPanelProps = {\n  entries: ChatTelemetry[];\n};\n\nexport function TelemetryPanel({ entries }: TelemetryPanelProps) {\n  if (entries.length === 0) {\n    return (\n      <section className=\"card\">\n        <strong>Telemetry</strong>\n        <p style={{ marginTop: \"0.5rem\", color: \"#94a3b8\" }}>\n          Messages you send will log latency and tokens once the teacher replies.\n        </p>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"card\">\n      <header>\n        <strong>Telemetry</strong>\n        <p style={{ marginTop: \"0.25rem\", color: \"#94a3b8\" }}>\n          Every turn records latency, token usage, and failure states. Use this to spot slow or failing models.\n        </p>\n      </header>\n      <ul className=\"telemetry-list\" style={{ marginTop: \"1rem\" }}>\n        {entries.map((entry) => (\n          <li key={entry.id}>\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n              <span style={{ fontWeight: 600 }}>{entry.model}</span>\n              <span className={`status-pill ${entry.status === \"success\" ? \"active\" : \"idle\"}`}>\n                {entry.status === \"success\" ? \"Success\" : \"Error\"}\n              </span>\n            </div>\n            <dl style={{ display: \"grid\", gridTemplateColumns: \"repeat(3, minmax(0, 1fr))\", gap: \"0.5rem\", marginTop: \"0.75rem\", fontSize: \"0.85rem\" }}>\n              <div>\n                <dt style={{ color: \"#94a3b8\", fontSize: \"0.7rem\", textTransform: \"uppercase\" }}>Latency</dt>\n                <dd style={{ margin: 0 }}>{entry.latencyMs} ms</dd>\n              </div>\n              <div>\n                <dt style={{ color: \"#94a3b8\", fontSize: \"0.7rem\", textTransform: \"uppercase\" }}>Tokens</dt>\n                <dd style={{ margin: 0 }}>{entry.totalTokens} total</dd>\n              </div>\n              <div>\n                <dt style={{ color: \"#94a3b8\", fontSize: \"0.7rem\", textTransform: \"uppercase\" }}>Started</dt>\n                <dd style={{ margin: 0 }}>{new Date(entry.startedAt).toLocaleTimeString()}</dd>\n              </div>\n            </dl>\n            {entry.errorMessage ? (\n              <p style={{ marginTop: \"0.5rem\", color: \"#f97316\" }}>\u26a0\ufe0f {entry.errorMessage}</p>\n            ) : null}\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\nEOF"
    },
    {
      "cell_type": "code",
      "source": "%%bash\nset -euo pipefail\ncat <<'EOF' > poe-chat-tutorial/app/page.tsx\n\"use client\";\n\nimport { useMemo, useState } from \"react\";\nimport { ModelSelector } from \"@/components/ModelSelector\";\nimport { ChatWindow } from \"@/components/ChatWindow\";\nimport { TelemetryPanel } from \"@/components/TelemetryPanel\";\nimport { poeModels, type PoeModelId } from \"@/lib/models\";\nimport type { ChatTelemetry } from \"@/lib/telemetry\";\n\nconst defaultModel: PoeModelId = (process.env.NEXT_PUBLIC_POE_DEFAULT_MODEL as PoeModelId) ?? \"gpt-oss-20b\";\n\nexport default function HomePage() {\n  const [model, setModel] = useState<PoeModelId>(defaultModel);\n  const [telemetry, setTelemetry] = useState<ChatTelemetry[]>([]);\n\n  const selectedModel = useMemo(() => poeModels.find((item) => item.id === model) ?? poeModels[0], [model]);\n\n  return (\n    <>\n      <section className=\"card\">\n        <header>\n          <h1 style={{ fontSize: \"2rem\", marginBottom: \"0.5rem\" }}>Poe Multi-Model Chat Tutorial</h1>\n          <p style={{ color: \"#94a3b8\" }}>\n            This playground mirrors the experience we build in the tutorial notebook: choose a Poe-hosted teacher, send prompts, stream responses, and verify telemetry.\n          </p>\n        </header>\n        <div className=\"callout warning\" style={{ marginTop: \"1rem\" }}>\n          <strong>Warning:</strong> Set <code>POE_API_KEY</code> in your environment before running <code>npm run dev</code>. Without it the API route will fall back to a dummy response and telemetry will mark failures.\n        </div>\n        <ul style={{ marginTop: \"1rem\", paddingLeft: \"1.25rem\", color: \"#94a3b8\" }}>\n          <li>\u2705 Client uses the OpenAI SDK pointed at <code>https://api.poe.com/v1</code>.</li>\n          <li>\u2705 Model selector is type-safe and guards unsupported values server-side.</li>\n          <li>\u2705 Telemetry panel captures latency, tokens, and error reasons for each turn.</li>\n        </ul>\n      </section>\n\n      <ModelSelector value={model} onChange={setModel} disabled={false} />\n\n      <ChatWindow\n        model={model}\n        onTelemetry={(entry) => setTelemetry((current) => [entry, ...current.slice(0, 19)])}\n      />\n\n      <TelemetryPanel entries={telemetry} />\n\n      <section className=\"card\">\n        <strong>Why this matters</strong>\n        <p style={{ marginTop: \"0.5rem\", color: \"#94a3b8\" }}>\n          Being able to flip between ten teachers in one UI is critical when product, enablement, and safety teams need to vet trade-offs quickly. The telemetry view highlights slow or failing models so you can update runbooks before launch.\n        </p>\n      </section>\n\n      <section className=\"card\">\n        <strong>Try this next</strong>\n        <ol style={{ marginTop: \"0.5rem\", color: \"#94a3b8\", paddingLeft: \"1.25rem\" }}>\n          <li>Add a temperature slider that pipes through to the API route.</li>\n          <li>Persist telemetry entries to <code>localStorage</code> so refreshes keep history.</li>\n          <li>Forward telemetry events to your analytics provider for cross-team dashboards.</li>\n        </ol>\n      </section>\n    </>\n  );\n}\nEOF"
    }
  ]
}
